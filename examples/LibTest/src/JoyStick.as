/*AS3 MutilTouch JoyStick Classauthor:ezshinecreate date:2010.11.11version:0.6 beta*/package{	import flash.display.Sprite;	import flash.display.BitmapData;	import flash.display.Bitmap;	import flash.geom.Rectangle;	import flash.display.DisplayObjectContainer;	import flash.events.MouseEvent;	import flash.geom.Point;	import flash.events.TouchEvent;	import flash.ui.Multitouch;	import flash.ui.MultitouchInputMode;	import flash.utils.setInterval;	import flash.utils.clearInterval;		public class JoyStick extends Sprite	{		public static const UP_LEFT		:int=5;		public static const UP_RIGHT	:int=6;		public static const DOWN_LEFT	:int=7;		public static const DOWN_RIGHT	:int=8;		public static const UP			:int=1;		public static const DOWN		:int=2;		public static const LEFT		:int=3;		public static const RIGHT		:int=4;		public static const CENTER		:int=9;				private var Ball_Radius			:int;		private var MoveArea_Radius		:int;				private var Ball_Clip			:Sprite;		private var Stick_Clip			:Sprite;		private var Dock_Clip			:Sprite;				private var Ball_BMP			:Bitmap;		private var Stick_BMP			:Bitmap;		private var Dock_BMP			:Bitmap;				private var isFollowTouchPoint	:Boolean=false;		private var isCanVisible		:Boolean=true;		private var isAutoHide			:Boolean=false;				private var ActiveRect			:Rectangle;				private var TouchID				:int=0;				private var CallBackFunction	:Function;		private var timer				:int;				private var angle				:Number;		private var power				:Number;		private var direction			:Point;				private var DirectionList		:Vector.<int>;		private var DirectionListLength	:int=5;		private var currentListIndex	:int=0;		private var PrevDirectionID		:int;				public function JoyStick(container:DisplayObjectContainer,ball_radius:int=50,movearea_radius:int=100,followtouch:Boolean=true,canvisible:Boolean=true,autohide:Boolean=false)		{			Ball_Radius=ball_radius;			MoveArea_Radius=movearea_radius;			isFollowTouchPoint=followtouch;			isCanVisible=canvisible;			isAutoHide=autohide;						ActiveRect=new Rectangle(0,0,240,320);						container.addChild(this);						init();		}		public function setBallTexture(bmd:BitmapData,autoballradius:Boolean=false){			Ball_BMP.bitmapData=bmd;						if(autoballradius){				Ball_Radius=Ball_BMP.width*.5;			}		}		public function setStickTexture(bmd:BitmapData){			Stick_BMP.bitmapData=bmd;		}		public function setDockTexture(bmd:BitmapData,autodockradius:Boolean=false){			Dock_BMP.bitmapData=bmd;						if(autodockradius){				MoveArea_Radius=Dock_BMP.width*.5;			}		}		private function init(){			this.visible=isCanVisible;			if(isAutoHide && isCanVisible){				this.visible=false;			}						Ball_Clip=new Sprite();			Ball_BMP=new Bitmap();			Ball_Clip.addChild(Ball_BMP);						Stick_Clip=new Sprite();			Stick_BMP=new Bitmap();			Stick_Clip.addChild(Stick_BMP);						Dock_Clip=new Sprite();			Dock_BMP=new Bitmap();			Dock_Clip.addChild(Dock_BMP);						addChild(Dock_Clip);			addChild(Stick_Clip);			addChild(Ball_Clip);						if(Multitouch.supportsTouchEvents){				Multitouch.inputMode=MultitouchInputMode.TOUCH_POINT;				stage.addEventListener(TouchEvent.TOUCH_BEGIN,onStageTouchDown);			}else{				stage.addEventListener(MouseEvent.MOUSE_DOWN,onStageMouseDown);			}		}		public function resetTexturePosition(){			Stick_Clip.x=0;			Stick_Clip.y=0;						Stick_BMP.x=0;			Stick_BMP.y=-Stick_BMP.height*.5;						Ball_Clip.x=-Ball_Clip.width*.5;			Ball_Clip.y=-Ball_Clip.height*.5;						Dock_Clip.x=-Dock_Clip.width*.5;			Dock_Clip.y=-Dock_Clip.height*.5;						Stick_BMP.width = Point.distance(new Point(Ball_Clip.x+Ball_Clip.width*.5,Ball_Clip.y+Ball_Clip.height*.5),new Point(0,0));		}		private function startTimer(){			timer=setInterval(update,stage.frameRate);		}		private function stopTimer(){			clearInterval(timer);		}		private function update(){			var CurDirectionID:int=JoyStick.getDirectionID(direction);			if(PrevDirectionID!=CurDirectionID){				DirectionList[currentListIndex]=CurDirectionID;				PrevDirectionID=CurDirectionID;				currentListIndex+=1;				if(currentListIndex>DirectionListLength)currentListIndex=0;			}			if(CallBackFunction!=null){				CallBackFunction({power:power,direction:direction,angle:angle});			}		}		private function resetDirectionList(){			DirectionList=new Vector.<int>(DirectionListLength);			currentListIndex=0;		}		public static function checkCommandMatch(target_cmd:Vector.<int>,match_cmd:Vector.<int>):Boolean{			return target_cmd.toString()==match_cmd.toString();		}		public static function getDirectionID(_direction:Point,offsetValue:Number=.5):int{			var directionName:int;			var xy_dis:Number=Math.abs(Math.abs(_direction.x)-Math.abs(_direction.y));			if(_direction.x>0 && _direction.y<0 && xy_dis<offsetValue){				directionName=UP_RIGHT;			}else if(_direction.x<0 && _direction.y<0 && xy_dis<offsetValue){				directionName=UP_LEFT;			}else if(_direction.x<0 && _direction.y>0 && xy_dis<offsetValue){				directionName=DOWN_LEFT;			}else if(_direction.x>0 && _direction.y>0 && xy_dis<offsetValue){				directionName=DOWN_RIGHT;			}else if(_direction.x>0 && _direction.y>-offsetValue && _direction.y<offsetValue){				directionName=RIGHT;			}else if(_direction.x<0 && _direction.y>-offsetValue && _direction.y<offsetValue){				directionName=LEFT;			}else if(_direction.y<0 && _direction.x>-offsetValue && _direction.x<offsetValue){				directionName=UP;			}else if(_direction.y>0 && _direction.x>-offsetValue && _direction.x<offsetValue){				directionName=DOWN;			}			return directionName;		}		public function setDirectionListLength(_max:int){			DirectionListLength=_max;		}		public function getDirectionList():Vector.<int>{			return DirectionList;		}		private function onStageTouchDown(e:TouchEvent){			if(TouchID!=0){				return;			}			var stageX:Number=e.stageX;			var stageY:Number=e.stageY;			if(stageX>ActiveRect.x && stageX<ActiveRect.x+ActiveRect.width && stageY>ActiveRect.y && stageY<ActiveRect.y+ActiveRect.height){				TouchID=e.touchPointID;								stage.addEventListener(TouchEvent.TOUCH_MOVE,onStageTouchMove);				stage.addEventListener(TouchEvent.TOUCH_END,onStageTouchUp);								if(isAutoHide && isCanVisible){					this.visible=true;				}								if(isFollowTouchPoint){					this.x=stageX;					this.y=stageY;				}								angle=Stick_Clip.rotation;				power=0;				direction=new Point(0,0);								resetDirectionList();								startTimer();			}		}		private function onStageMouseDown(e:MouseEvent){			var stageX:Number=stage.mouseX;			var stageY:Number=stage.mouseY;			if(stageX>ActiveRect.x && stageX<ActiveRect.x+ActiveRect.width && stageY>ActiveRect.y && stageY<ActiveRect.y+ActiveRect.height){				stage.addEventListener(MouseEvent.MOUSE_MOVE,onStageMouseMove);				stage.addEventListener(MouseEvent.MOUSE_UP,onStageMouseUp);								if(isAutoHide && isCanVisible){					this.visible=true;				}								if(isFollowTouchPoint){					this.x=stageX;					this.y=stageY;				}								angle=Stick_Clip.rotation;				power=0;				direction=new Point(0,0);								resetDirectionList();								startTimer();			}		}		private function onStageTouchMove(e:TouchEvent){			if(e.touchPointID != TouchID) { 				return; 			}			var stageX:Number=e.stageX;			var stageY:Number=e.stageY;						var localPoint:Point=this.globalToLocal(new Point(stageX,stageY));			var ssp:Point=Stick_Clip.globalToLocal(new Point(stageX,stageY));						angle=Math.atan2((localPoint.y-0),(localPoint.x-0))/(Math.PI/180);						Stick_Clip.rotation=angle;						var xm:Number=ssp.x;			if(xm>MoveArea_Radius-Ball_Radius){				xm=MoveArea_Radius-Ball_Radius;			}						Stick_BMP.width = xm ;						var gp:Point=Stick_Clip.localToGlobal(new Point(xm,0));						Ball_Clip.x=(gp.x-this.x)-Ball_Clip.width*.5;			Ball_Clip.y=(gp.y-this.y)-Ball_Clip.height*.5;						power=xm/(MoveArea_Radius-Ball_Radius);			direction=new Point(Math.cos(angle * (Math.PI/180)),Math.sin(angle * (Math.PI/180)));		}		private function onStageMouseMove(e:MouseEvent){			var stageX:Number=stage.mouseX;			var stageY:Number=stage.mouseY;						var localPoint:Point=this.globalToLocal(new Point(stageX,stageY));			var ssp:Point=Stick_Clip.globalToLocal(new Point(stageX,stageY));						angle=Math.atan2((localPoint.y-0),(localPoint.x-0))/(Math.PI/180);						Stick_Clip.rotation=angle;						var xm:Number=ssp.x;			if(xm>MoveArea_Radius-Ball_Radius){				xm=MoveArea_Radius-Ball_Radius;			}						Stick_BMP.width = xm ;						var gp:Point=Stick_Clip.localToGlobal(new Point(xm,0));						Ball_Clip.x=(gp.x-this.x)-Ball_Clip.width*.5;			Ball_Clip.y=(gp.y-this.y)-Ball_Clip.height*.5;						power=xm/(MoveArea_Radius-Ball_Radius);			direction=new Point(Math.cos(angle * (Math.PI/180)),Math.sin(angle * (Math.PI/180)));		}		private function onStageTouchUp(e:TouchEvent){			if(e.touchPointID != TouchID) { 				return; 			} 			TouchID = 0; 			stage.removeEventListener(TouchEvent.TOUCH_MOVE,onStageTouchMove);			stage.removeEventListener(TouchEvent.TOUCH_END,onStageTouchUp);						if(isAutoHide && isCanVisible){				this.visible=false;			}						resetTexturePosition();						stopTimer();		}		private function onStageMouseUp(e:MouseEvent){			stage.removeEventListener(MouseEvent.MOUSE_MOVE,onStageMouseMove);			stage.removeEventListener(MouseEvent.MOUSE_UP,onStageMouseUp);						if(isAutoHide && isCanVisible){				this.visible=false;			}						resetTexturePosition();						stopTimer();		}		public function AbsRemove(){			removeChild(Dock_Clip);			removeChild(Stick_Clip);			removeChild(Ball_Clip);						Ball_Clip=null;			Stick_Clip=null;			Stick_BMP=null;			Dock_Clip=null;						if(Multitouch.supportsTouchEvents){				stage.removeEventListener(TouchEvent.TOUCH_BEGIN,onStageTouchDown);			}else{				stage.removeEventListener(MouseEvent.MOUSE_DOWN,onStageMouseDown);			}		}		public function set moveAreaRadius(_moveAreaRadius:int){			MoveArea_Radius=_moveAreaRadius;		}		public function set callBackFunc(_callbackfunc:Function){			CallBackFunction=_callbackfunc;		}		public function set activeRectangle(_activeRectangle:Rectangle){			ActiveRect=_activeRectangle;		}	}}